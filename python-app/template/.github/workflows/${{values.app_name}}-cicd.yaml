name: ${{values.app_name}}-cicd

on:
  push:
    paths:
      - src/**
    branches:
      - main

jobs:
# scorecard automation script
  scorecard:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GITHUB_PAT: ${{ secrets.GITHUB_PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Clone Scorecard Automation Repo
        run: |
          git clone https://github.com/kezri29/backstage-scorecard-automation.git
          cd backstage-scorecard-automation

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.9'

      - name: Install Dependencies
        run: |
          cd backstage-scorecard-automation
          pip install -r requirements.txt

      - name: Run Scorecard Automation
        run: |
          cd backstage-scorecard-automation
          python graph.py --repo-url https://github.com/kezri-29/${{values.app_name}}
          
# continuous integration job
  ci:
    needs: scorecard
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  # use to shorten the commit SHA for tagging the Docker image
      - name: Set short SHA
        id: vars
        run: echo "short_sha=${GITHUB_SHA::6}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ '${{ secrets.DOCKERHUB_USERNAME }}' }}
          password:  ${{ '${{ secrets.DOCKERHUB_TOKEN }}' }} 

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: kesarikumaran/${{values.app_name}}:${{ '${{ steps.vars.outputs.short_sha }}' }}
    outputs: 
      commit_id: ${{ '${{ steps.vars.outputs.short_sha }}' }}

# continuous deployment job
  cd:
    needs: ci
    runs-on: self-hosted
    steps:
    # Cloning the repository to access the values.yaml file
      - uses: actions/checkout@v3

    # Modifying the values.yaml file to use the short SHA from the CI job
      - name: Modify values yaml file
        shell: bash
        run: |
          echo ${{ '${{needs.ci.outputs.commit_id}}' }} 
          pip install yq
          yq -Yi '.image.tag = "${{ '${{needs.ci.outputs.commit_id}}' }}"' charts/${{values.app_name}}/values-${{values.app_env}}.yaml

    # pushing changes to the github repo before syncing the argocd pipeline
      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update values.yaml with commit ID - ${{ '${{needs.ci.outputs.commit_id}}' }}"

    # need to install argocd cli inorder to connect to the argocd server for deployment
      - name: Install ArgoCD
        shell: bash
        run: |
          curl -ksSL -o argocd http://argocd-server.argocd/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv ./argocd /usr/local/bin/argocd
  
    # Login to the ArgoCD server  
      - name: argocd login
        shell: bash
        run: |
          argocd login argocd-server.argocd \
            --insecure  \
            --grpc-web \
            --username admin \
            --password  ${{ '${{ secrets.ARGOCD_PASSWORD }}' }}

    # In order to create a repo of the new github repo and app create it in ArgoCD
      - name: Ensure argocd repo add and sync
        shell: bash
        run: |
          repo=https://github.com/kezri-29/${{values.app_name}}.git
          argocd repo list | grep -q $repo || argocd repo add $repo

          argocd app get ${{values.app_name}} || argocd app create ${{values.app_name}} \
            --repo $repo \
            --path charts/${{values.app_name}} \
            --dest-namespace ${{values.app_env}} \
            --dest-server https://kubernetes.default.svc \
            --values values-${{values.app_env}}.yaml \
            --revision main \
            --sync-policy manual \
            --sync-option CreateNamespace=true
    
    # Syncing the ArgoCD application to deploy the changes
      - name: ArgoCD app sync
        shell: bash
        run: |
          argocd app sync ${{values.app_name}}

          argocd app wait ${{values.app_name}} --timeout 180
